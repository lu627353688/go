package main

import "fmt"

/**
指针是存储另一个变量的内存地址的变量.
变量是一种使用方便的占位符，用于引用计算机内存地址

使用 & 符号获取变量的地址
注意: 不能直接 &1 这样, 但是可以这样 a := 1  b := &a

指针变量的声明
方式一:
name1 := &name2
方式二:
var name *int  // 指针指向 int 类型
var name2 *float // 指针指向 float 类型
var a int = 1
var b float = 1.1
name = &a
name2 = &b

使用*读取指针指向内存地址中的值

使用*也可以直接修改内存地址中的值

指针的指针, 使用 ** 获取值

*/

func main() {
	a := 1
	b := &a
	fmt.Printf("使用指针修改前 a 的值是 %d, 内存地址是: %p \n", a, b)
	*b++
	fmt.Printf("使用指针修改后 a 的值是 %d, 内存地址是: %p \n", a, b)
	a++
	fmt.Printf("使用赋值方式修改后 a 的值是 %d, 内存地址是: %p \n", a, b)
	/**
	执行结果:
	使用指针修改前 a 的值是 1, 内存地址是: 0xc00000a0e8
	使用指针修改后 a 的值是 2, 内存地址是: 0xc00000a0e8
	使用赋值方式修改后 a 的值是 3, 内存地址是: 0xc00000a0e8
	*/
	var c **int
	c = &b
	fmt.Printf("c指向的内存地址是: %p, %p 指向的内存地址是: %p, %p 存储的值是 %d \n", c, c, *c, *c, **c)
	/**
	c指向的内存地址是: 0xc0000ca018, 0xc0000ca018 指向的内存地址是: 0xc00000a0e8, 0xc00000a0e8 存储的值是 3
	*/
}
